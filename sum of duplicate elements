//finding sum of duplicate elements in an array
//time complexity = O(n), space complexity = O(n)
#include<bits/stdc++.h>
using namespace std;

void print_sum(vector<int> &arr, int n){
    unordered_map<int,int> umap;
    for(auto x:arr){       //storing elements with their counts
        if(umap.find(x) != umap.end()){
            umap[x]++;
        }
        else umap[x] = 1;
    }
    unordered_map<int,int>::iterator i;
    int opt=0;  //output sum
    for(i=umap.begin();i!=umap.end();++i){
        if((i -> second) > 1) opt += (i -> first)*(i ->second);
    }
    cout<<opt;
}

int main(){
    int n,i;
    cin>>n;
    vector<int> arr(n);
    for(i=0;i<n;i++) cin>>arr[i];
    print_sum(arr,n);
    return 0;
}
